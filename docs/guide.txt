앱 업데이트 방법을 알려드리겠습니다.

앱 업데이트 방법
1. 일반적인 업데이트 (네이티브 코드 변경 시)
새로운 APK 빌드가 필요한 경우:

새로운 라이브러리 추가

네이티브 코드 변경

권한 변경

앱 아이콘 변경

업데이트 절차:

bash
# 1. app.json에서 버전 코드 증가
"android": {
  "versionCode": 2,  // 이전 버전보다 1 증가
  "package": "com.sonrak.RainOnDay"
}

# 2. 앱 버전도 업데이트 (선택사항)
"version": "1.0.1",

# 3. 새로운 APK 빌드
eas build --platform android --profile preview
2. 빠른 업데이트 (JavaScript 코드만 변경 시)
EAS Update 사용 - 앱스토어 재배포 없이 즉시 업데이트:

초기 설정:

bash
# expo-updates 라이브러리 설치
npx expo install expo-updates

# EAS Update 설정
eas update:configure
eas.json 설정 확인:

json
{
  "build": {
    "preview": {
      "distribution": "internal",
      "channel": "preview"
    },
    "production": {
      "channel": "production"
    }
  }
}
업데이트 배포:

bash
# JavaScript 코드 수정 후
eas update --branch preview --message "버그 수정 및 기능 개선"

# 또는 프로덕션용
eas update --branch production --message "중요한 버그 수정"
3. 업데이트 시나리오별 가이드
시나리오 1: UI 수정, 버그 수정

bash
# 코드 수정 후
eas update --branch preview --message "UI 개선 및 버그 수정"
→ 사용자가 앱을 다시 실행하면 자동으로 업데이트 적용

시나리오 2: 새로운 기능 추가 (네이티브 코드 없음)

bash
# 코드 수정 후
eas update --branch preview --message "새로운 날씨 알림 기능 추가"
시나리오 3: 새로운 라이브러리 추가

bash
# app.json 버전 코드 증가
"versionCode": 3

# 새로운 APK 빌드
eas build --platform android --profile preview
4. Google Play Store 업데이트
새로운 APK를 스토어에 업로드할 때:

버전 코드 반드시 증가

json
"android": {
  "versionCode": 3,  // 이전보다 큰 숫자
}
Google Play Console에서:

새 릴리스 만들기

APK 업로드

출시 노트 작성

검토 후 배포

5. 실제 사용 예시
비온데이 앱에서 날씨 알림 메시지를 수정한다면:

bash
# 1. utils/notifications.js에서 알림 메시지 수정
# 2. 즉시 업데이트 배포
eas update --branch preview --message "알림 메시지 개선"

# 사용자는 앱 재시작 시 자동으로 새 메시지 확인 가능
새로운 날씨 API를 추가한다면:

bash
# 1. app.json에서 versionCode 증가
# 2. 새로운 APK 빌드
eas build --platform android --profile preview
# 3. 새 APK를 사용자에게 배포
6. 업데이트 확인 방법
EAS Update 대시보드에서:

https://expo.dev/accounts/[your-username]/projects/rainonday/updates

업데이트 배포 현황 확인 가능

앱에서 업데이트 상태 확인:

javascript
// 업데이트 확인 코드 (선택사항)
import * as Updates from 'expo-updates';

const checkForUpdates = async () => {
  const update = await Updates.checkForUpdateAsync();
  if (update.isAvailable) {
    await Updates.fetchUpdateAsync();
    Updates.reloadAsync();
  }
};
이제 코드 수정 후 eas update 명령어로 빠르게 업데이트하거나, 큰 변경사항이 있을 때는 새로운 APK를 빌드하여 배포할 수 있습니다!